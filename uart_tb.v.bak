`timescale 1ns/1ps
module testbench #(
    parameter n = 8,
    parameter f_MHz = 50,
    parameter f_baud = 9600
);
    
    reg clk, rst_n, RX;
    wire clk_gen, recv_req, bit_begin;
	 wire [n+1:0] reg_RX;
	 wire [n-1:0] d_out;

    uart_rx #(n, f_MHz, f_baud) duv(
        .clk(clk),
        .rst_n(rst_n),
		  .bit_begin(bit_begin),
        // RX side
        .RX(RX),
        .clk_gen(clk_gen),
		  .recv_req(recv_req),
		  .reg_RX(reg_RX),
		  .d_out(d_out)
    );
			
    initial begin
        clk = 0;
        forever #1 clk = ~clk;
    end
    localparam T_baud = f_MHz*1000000/f_baud;
    localparam T_wait = 1*T_baud;
    initial begin
        rst_n = 1;
        #2 rst_n = 0;
        #2 rst_n = 1;
    end
    initial begin
		  $random;
		  #4;
        repeat(100000) begin
            RX = 0; // start_bit
            repeat(4) begin
                #T_baud
                RX = ~$random;
                #T_baud;    
            end
            #T_baud
            RX = 1; // stop_bit
            #T_wait;
        end
    end

endmodule